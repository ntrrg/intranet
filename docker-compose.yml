version: "3.6"
services:
  # DDI

  dns:
    image: intranet-dns
    ports:
      - "53:53"
      - "53:53/udp"
    networks:
      - ddi
    deploy:
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.role == manager

  # Web

  reverse-proxy:
    image: intranet-reverse-proxy
    ports:
      - "80:80"
      - "443:443"
    networks:
      - web
    secrets:
      - source: site_privkey.pem
        mode: 0000
      - source: site_fullchain.pem
        mode: 0000
      - source: home_privkey.pem
        mode: 0000
      - source: home_fullchain.pem
        mode: 0000
      - source: test_privkey.pem
        mode: 0000
      - source: test_fullchain.pem
        mode: 0000
      - htpasswd
    deploy:
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
  status:
    image: dockersamples/visualizer
    networks:
      - web
    volumes:
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
    deploy:
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.role == manager
  site:
    image: ntrrg/site
    networks:
      - web
    deploy:
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.labels.site == true
  storage:
    image: ntrrg/nginx:http
    networks:
      - web
    volumes:
      - type: bind
        source: $SERVER/srv/storage
        target: /usr/share/nginx/html
        read_only: true
    deploy:
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.labels.storage == true
  filebrowser:
    image: filebrowser/filebrowser
    command: -b /admin -d /srv/filebrowser.db -s /srv/data
    networks:
      - web
    volumes:
      - type: bind
        source: $SERVER/srv/storage
        target: /srv
    deploy:
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.labels.storage == true
  mirrors:
    image: ntrrg/nginx:http
    networks:
      - web
    volumes:
      - type: bind
        source: $SERVER/srv/mirrors
        target: /usr/share/nginx/html
        read_only: true
    deploy:
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.labels.mirrors == true
  git:
    image: gogs/gogs
    ports:
      - "22:22"
    networks:
      - web
    volumes:
      - type: bind
        source: $SERVER/srv/gogs
        target: /data
    deploy:
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.labels.git == true
  ci-server:
    depends_on:
      - git
    image: drone/drone
    environment:
      - DRONE_HOST=https://ci.nt.web.ve
      - DRONE_ADMIN=ntrrg
      - DRONE_GOGS=true
      - DRONE_GOGS_URL=https://git.nt.web.ve
      - DRONE_SECRET=$DRONE_SECRET
    networks:
      - web
    volumes:
      - type: bind
        source: $SERVER/srv/drone
        target: /var/lib/drone
    deploy:
      endpoint_mode: dnsrr
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.labels.ci-server == true
  ci-builder:
    depends_on:
      - ci-server
    image: drone/agent
    command: agent
    environment:
      - DRONE_SERVER=ci-server:9000
      - DRONE_SECRET=$DRONE_SECRET
    networks:
      - web
    volumes:
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
    deploy:
      mode: global
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.labels.ci-builder == true
  registry:
    image: registry:2
    networks:
      - web
    volumes:
      - type: bind
        source: $SERVER/srv/registry
        target: /var/lib/registry
    deploy:
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.labels.registry == true
  docker-registry:
    image: registry:2
    environment:
      - REGISTRY_PROXY_REMOTEURL=https://registry-1.docker.io
    networks:
      - web
    volumes:
      - type: bind
        source: $SERVER/srv/docker-registry
        target: /var/lib/registry
    deploy:
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.labels.docker-registry == true
networks:
  ddi:
  web:
secrets:
  site_privkey.pem:
    file: $SERVER/etc/letsencrypt/archive/nt.web.ve/privkey1.pem
  site_fullchain.pem:
    file: $SERVER/etc/letsencrypt/archive/nt.web.ve/fullchain1.pem
  home_privkey.pem:
    file: $SERVER/etc/letsencrypt/archive/home.nt.web.ve/privkey1.pem
  home_fullchain.pem:
    file: $SERVER/etc/letsencrypt/archive/home.nt.web.ve/fullchain1.pem
  test_privkey.pem:
    file: $SERVER/etc/letsencrypt/archive/test.nt.web.ve/privkey1.pem
  test_fullchain.pem:
    file: $SERVER/etc/letsencrypt/archive/test.nt.web.ve/fullchain1.pem
  htpasswd:
    file: $SERVER/etc/htpasswd

